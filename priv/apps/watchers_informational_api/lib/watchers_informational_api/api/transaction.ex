# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule WatchersInformationalAPI.Api.Transaction do
  @moduledoc """
  API calls for all endpoints tagged `Transaction`.
  """

  alias WatchersInformationalAPI.Connection
  import WatchersInformationalAPI.RequestBuilder

  @doc """
  Finds an optimal way to construct a transaction spending particular amount.
  Given token, amount and spender, finds spender's inputs sufficient to perform a payment. If also provided with receiver's address, creates and encodes a transaction. 

  ## Parameters

  - connection (WatchersInformationalAPI.Connection): Connection to server
  - create_transactions_body_schema (CreateTransactionsBodySchema): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %WatchersInformationalAPI.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec create_transaction(
          Tesla.Env.client(),
          WatchersInformationalAPI.Model.CreateTransactionsBodySchema.t(),
          keyword()
        ) :: {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def create_transaction(connection, create_transactions_body_schema, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/transaction.create")
    |> add_param(:body, :body, create_transactions_body_schema)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end

  @doc """
  Sends EIP-712 formatted transaction to Child chain.
  Request to this method is the same as to Web3 `eth_signTypedData` with additional `signatures` array. The `/transaction.create` `typed_data` field can be used to prepare transaction. The same conditions are met as with security-critical `/transaction.submit` 

  ## Parameters

  - connection (WatchersInformationalAPI.Connection): Connection to server
  - u_nknownbasetype (UNKNOWN_BASE_TYPE): Transaction as for `eth_signTypedData` along with signatures
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %WatchersInformationalAPI.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec submit_typed(Tesla.Env.client(), WatchersInformationalAPI.Model.UNKNOWN_BASE_TYPE.t(), keyword()) ::
          {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def submit_typed(connection, u_nknownbasetype, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/transaction.submit_typed")
    |> add_param(:body, :body, u_nknownbasetype)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end

  @doc """
  Gets a transaction with the given id.

  ## Parameters

  - connection (WatchersInformationalAPI.Connection): Connection to server
  - get_transaction_body_schema (GetTransactionBodySchema): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %WatchersInformationalAPI.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec transaction_get(Tesla.Env.client(), WatchersInformationalAPI.Model.GetTransactionBodySchema.t(), keyword()) ::
          {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def transaction_get(connection, get_transaction_body_schema, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/transaction.get")
    |> add_param(:body, :body, get_transaction_body_schema)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end

  @doc """
  Gets all transactions (can be limited with various filters).
  Digests the details of the transaction, by listing the value of outputs, aggregated by currency. Intended to be used when presenting the little details about multiple transactions. For all details queries to `/transaction.get` should be made using the transaction's hash provided. 

  ## Parameters

  - connection (WatchersInformationalAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :get_all_transactions_body_schema1 (GetAllTransactionsBodySchema1): 
  ## Returns

  {:ok, %WatchersInformationalAPI.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec transactions_all(Tesla.Env.client(), keyword()) :: {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def transactions_all(connection, opts \\ []) do
    optional_params = %{
      :GetAllTransactionsBodySchema1 => :body
    }

    %{}
    |> method(:post)
    |> url("/transaction.all")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end
end
