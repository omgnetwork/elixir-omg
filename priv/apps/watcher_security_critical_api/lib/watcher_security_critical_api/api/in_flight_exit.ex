# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule WatcherSecurityCriticalAPI.Api.InFlightExit do
  @moduledoc """
  API calls for all endpoints tagged `InFlightExit`.
  """

  alias WatcherSecurityCriticalAPI.Connection
  import WatcherSecurityCriticalAPI.RequestBuilder

  @doc """
  Returns a competitor to an in-flight exit.
  Note that if the competing transaction has not been put into a block `competing_tx_pos` and `competing_proof` will not be returned.

  ## Parameters

  - connection (WatcherSecurityCriticalAPI.Connection): Connection to server
  - inline_object (InlineObject): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %WatcherSecurityCriticalAPI.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec in_flight_exit_get_competitor(Tesla.Env.client(), WatcherSecurityCriticalAPI.Model.InlineObject.t(), keyword()) ::
          {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def in_flight_exit_get_competitor(connection, inline_object, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/in_flight_exit.get_competitor")
    |> add_param(:body, :body, inline_object)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end

  @doc """
  Gets exit data for an in-flight exit.
  Exit data are arguments to `startInFlightExit` root chain contract function. 

  ## Parameters

  - connection (WatcherSecurityCriticalAPI.Connection): Connection to server
  - in_flight_exit_tx_bytes_body_schema (InFlightExitTxBytesBodySchema): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %WatcherSecurityCriticalAPI.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec in_flight_exit_get_data(
          Tesla.Env.client(),
          WatcherSecurityCriticalAPI.Model.InFlightExitTxBytesBodySchema.t(),
          keyword()
        ) :: {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def in_flight_exit_get_data(connection, in_flight_exit_tx_bytes_body_schema, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/in_flight_exit.get_data")
    |> add_param(:body, :body, in_flight_exit_tx_bytes_body_schema)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end

  @doc """
  Gets the data to challenge an invalid input piggybacked on an in-flight exit.
  To respond to invalid piggybacked input in non-canonical in-flight transaction provides data needed to challenge it, e.g. transaction that spent this input and signature.

  ## Parameters

  - connection (WatcherSecurityCriticalAPI.Connection): Connection to server
  - in_flight_exit_input_challenge_data_body_schema (InFlightExitInputChallengeDataBodySchema): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %WatcherSecurityCriticalAPI.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec in_flight_exit_get_input_challenge_data(
          Tesla.Env.client(),
          WatcherSecurityCriticalAPI.Model.InFlightExitInputChallengeDataBodySchema.t(),
          keyword()
        ) :: {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def in_flight_exit_get_input_challenge_data(connection, in_flight_exit_input_challenge_data_body_schema, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/in_flight_exit.get_input_challenge_data")
    |> add_param(:body, :body, in_flight_exit_input_challenge_data_body_schema)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end

  @doc """
  Gets the data to challenge an invalid output piggybacked on an in-flight exit.
  To respond to invalid piggybacked output in canonical in-flight transaction provides data needed to challenge it, e.g. in-flight transaction inclusion proof, transaction that spent this output and signature.

  ## Parameters

  - connection (WatcherSecurityCriticalAPI.Connection): Connection to server
  - in_flight_exit_output_challenge_data_body_schema (InFlightExitOutputChallengeDataBodySchema): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %WatcherSecurityCriticalAPI.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec in_flight_exit_get_output_challenge_data(
          Tesla.Env.client(),
          WatcherSecurityCriticalAPI.Model.InFlightExitOutputChallengeDataBodySchema.t(),
          keyword()
        ) :: {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def in_flight_exit_get_output_challenge_data(
        connection,
        in_flight_exit_output_challenge_data_body_schema,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/in_flight_exit.get_output_challenge_data")
    |> add_param(:body, :body, in_flight_exit_output_challenge_data_body_schema)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end

  @doc """
  Proves transaction is canonical.
  To respond to a challenge to an in-flight exit, this proves that the transaction has been put into a block (and therefore is canonical).

  ## Parameters

  - connection (WatcherSecurityCriticalAPI.Connection): Connection to server
  - inline_object1 (InlineObject1): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %WatcherSecurityCriticalAPI.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec in_flight_exit_prove_canonical(
          Tesla.Env.client(),
          WatcherSecurityCriticalAPI.Model.InlineObject1.t(),
          keyword()
        ) :: {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def in_flight_exit_prove_canonical(connection, inline_object1, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/in_flight_exit.prove_canonical")
    |> add_param(:body, :body, inline_object1)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end
end
