version: 2.1

executors:
  metal:
    docker:
      - image: circleci/elixir:1.10.2
      - image: circleci/postgres:9.6
        environment:
          MIX_ENV: test
          POSTGRES_USER: omisego_dev
          POSTGRES_PASSWORD: omisego_dev
          POSTGRES_DB: omisego_test
          CIRLCECI: true
    working_directory: ~/src

  metal_macos:
    macos:
      xcode: "11.0.0"

  builder:
    docker:
      - image: omisegoimages/elixir-omg-builder:stable-20200407
    working_directory: ~/src

  builder_pg:
    docker:
      - image: omisegoimages/elixir-omg-builder:stable-20200407
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: omisego_dev
          POSTGRES_PASSWORD: omisego_dev
          POSTGRES_DB: omisego_test
    working_directory: ~/src

  builder_pg_geth:
    docker:
      - image: omisegoimages/elixir-omg-tester:stable-20200407
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: omisego_dev
          POSTGRES_PASSWORD: omisego_dev
          POSTGRES_DB: omisego_test
    working_directory: ~/src

  deployer:
    docker:
      - image: omisegoimages/elixir-omg-deploy:stable-20200407
    working_directory: ~/src

commands:
  setup_elixir-omg_workspace:
    description: "Setup workspace"
    steps:
      - attach_workspace:
          name: Attach workspace
          at: .

jobs:
  barebuild:
    executor: metal
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - run: make install-hex-rebar
      - run: echo 'export PATH=~/.cargo/bin:$PATH' >> $BASH_ENV
      - run:
          command: ./bin/setup
          no_output_timeout: 2400
      - run: make deps-elixir-omg
      - run: ERLANG_ROCKSDB_BUILDOPTS='-j 2' make build-test
      - run: mix test --trace
      - run:
          name: Integration Tests
          command: |
            # Slow, serial integration test, run nightly. Here to make sure the standard `mix test --only integration --trace` works
            export SHELL=/bin/bash
            mix test --only integration --trace
          no_output_timeout: 30m
  barebuild_macos:
    executor: metal_macos
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - run: echo 'export PATH=~/.cargo/bin:$PATH' >> $BASH_ENV
      - run: |
          brew install postgres
          initdb /usr/local/var/postgres/data
          pg_ctl -D /usr/local/var/postgres/data -l /tmp/postgresql.log start
          psql template1 \<<EOF
          CREATE USER omisego_dev WITH CREATEDB ENCRYPTED PASSWORD 'omisego_dev';
          CREATE DATABASE omisego_dev OWNER 'omisego_dev';
          EOF
      - run: |
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.4
          echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bash_profile
          echo -e '\n. $HOME/.asdf/completions/asdf.bash' >> ~/.bash_profile
          source ~/.bash_profile
          asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git
          asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git
          asdf install erlang 22.3
          asdf install elixir 1.10.2
          asdf global elixir 1.10.2
          asdf global erlang 22.3
      - run:
          command: ./bin/setup
          no_output_timeout: 2400
      - run: make deps-elixir-omg
      - run: ERLANG_ROCKSDB_BUILDOPTS='-j 2' make build-test
      - run: mix test --trace
  build:
    executor: builder
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - restore_cache:
          key: v1-rocksdb-cache-{{ checksum "mix.lock" }}
      - run: make init_test
      - run: make deps-elixir-omg
      - run: ERLANG_ROCKSDB_BUILDOPTS='-j 2' make build-test
      - save_cache:
          key: v2-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
          paths: "_build_docker"
      - save_cache:
          key: v1-rocksdb-cache-{{ checksum "mix.lock" }}
          paths:
            - "deps_docker/"
            - "deps_docker/rocksdb"
            - "_build_docker/test/lib/rocksdb/"
            - "_build_docker/test/dev/rocksdb/"
            - "deps/"
            - "_build/test/lib/rocksdb/"
            - "_build/test/dev/rocksdb/"
      - persist_to_workspace:
          name: Persist workspace
          root: ~/src
          paths:
            - .circleci
            - dialyzer.ignore-warnings
            - .formatter.exs
            - _build_docker
            - .credo.exs
            - apps
            - bin
            - config
            - deps_docker
            - doc
            - mix.exs
            - mix.lock
            - deploy_and_populate.sh
            - launcher.py
            - docker-compose.yml
            - rel/
            - VERSION
            - .git
            - Makefile
            - priv
            - data
            - snapshots.env
            - contract_addresses_template.env
            - localchain_contract_addresses.env

  audit_deps:
    executor: builder
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - run: mix deps.audit

  lint:
    executor: builder
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - run: make install-hex-rebar
      - run: mix do compile --warnings-as-errors --force, credo, format --check-formatted --dry-run

  lint_version:
    executor: builder
    steps:
      - setup_elixir-omg_workspace
      - run:
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              _tagged_version="${CIRCLE_TAG#*v}"
              _filed_version="$(head -n 1 ./VERSION | sed 's/^[ \t]*//;s/[ \t]*$//')"

              if [ "$_tagged_version" != "$_filed_version" ]; then
                echo "The git tag \"${CIRCLE_TAG}\" expects the VERSION to be \"${_tagged_version}\". Got \"${_filed_version}\"."
                exit 1
              fi
            else
              echo "This build is not version-tagged. Skipping version lint."
              exit 0
            fi

  sobelow:
    executor: builder_pg
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - run: mix archive.install hex sobelow --force
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r .
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_bus
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_child_chain
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_child_chain_rpc --router apps/omg_child_chain_rpc/lib/omg_child_chain_rpc/web/router.ex
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_db
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_eth
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_status
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_utils
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_watcher
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_watcher_info
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_watcher_rpc --router apps/omg_watcher_rpc/lib/web/router.ex

  child_chain_coveralls_and_integration_tests:
    executor: builder_pg_geth
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v2-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Integration Tests & Coveralls Part Child Chain
          command: |
            # Don't submit coverage report for forks, but let the build succeed
            export SHELL=/bin/bash
            if [[ -z "$COVERALLS_REPO_TOKEN" ]]; then
              mix coveralls.html --parallel --umbrella --include child_chain --exclude watcher --exclude watcher_info --exclude common --exclude test --trace
            else
              mix coveralls.circle --parallel --umbrella --include child_chain --exclude watcher --exclude watcher_info --exclude common --exclude test --trace ||
                # if mix failed, then coveralls_report won't run, so signal done here and return original exit status
                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done" && exit $retval)
            fi

  watcher_coveralls_and_integration_tests:
    executor: builder_pg_geth
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v2-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Integration Tests & Coveralls Part Watcher
          command: |
            # Don't submit coverage report for forks, but let the build succeed
            export SHELL=/bin/bash
            if [[ -z "$COVERALLS_REPO_TOKEN" ]]; then
              mix coveralls.html --parallel --umbrella --include watcher --exclude watcher_info --exclude child_chain --exclude common --exclude test --trace
            else
              mix coveralls.circle --parallel --umbrella --include watcher --exclude watcher_info --exclude child_chain --exclude common --exclude test --trace ||
                # if mix failed, then coveralls_report won't run, so signal done here and return original exit status
                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done" && exit $retval)
            fi

  common_coveralls_and_integration_tests:
    executor: builder_pg_geth
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v2-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Integration Tests & Coveralls Part Common
          command: |
            # Don't submit coverage report for forks, but let the build succeed
            export SHELL=/bin/bash
            if [[ -z "$COVERALLS_REPO_TOKEN" ]]; then
              mix coveralls.html --parallel --umbrella --include common --exclude watcher --exclude watcher_info --exclude child_chain --exclude test --trace
            else
              mix coveralls.circle --parallel --umbrella --include common --exclude watcher --exclude watcher_info --exclude child_chain --exclude test --trace ||
                # if mix failed, then coveralls_report won't run, so signal done here and return original exit status
                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done" && exit $retval)
            fi

  test:
    executor: builder_pg
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v2-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Test
          command: |
            # Don't submit coverage report for forks, but let the build succeed
            export SHELL=/bin/bash
            if [[ -z "$COVERALLS_REPO_TOKEN" ]]; then
              mix coveralls.html --parallel --umbrella --trace --exclude common --exclude watcher --exclude watcher_info --exclude child_chain
            else
              mix coveralls.circle --parallel --umbrella --trace --exclude common --exclude watcher --exclude watcher_info --exclude child_chain ||
                # if mix failed, then coveralls_report won't run, so signal done here and return original exit status
                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done" && exit $retval)
            fi

  property_tests:
    executor: builder_pg_geth
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v2-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Property Test
          command: |
            export SHELL=/bin/bash
            # no coverage calculation, coverage is on the other tests
            mix test --only property --trace

  integration_tests:
    executor: builder_pg_geth
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v2-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Integration Tests
          command: |
            # Slow, serial integration test, run nightly. Here to make sure the standard `mix test --trace --only integration` works
            export SHELL=/bin/bash
            mix test --trace --only integration

  dialyzer:
    executor: builder_pg
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v3-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.lock" }}
            - v3-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.exs" }}
            - v3-plt-cache-{{ ".tool-versions" }}
      - run:
          name: Unpack PLT cache
          command: |
            mkdir -p _build_docker/test
            cp plts/dialyxir*.plt _build_docker/test/ || true
            mkdir -p ~/.mix
            cp plts/dialyxir*.plt ~/.mix/ || true
      - run: mix dialyzer --plt
      - run:
          name: Pack PLT cache
          command: |
            mkdir -p plts
            cp _build_docker/test/dialyxir*.plt plts/
            cp ~/.mix/dialyxir*.plt plts/
      - save_cache:
          key: v3-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.lock" }}
          paths:
            - plts
      - save_cache:
          key: v3-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.exs" }}
          paths:
            - plts
      - save_cache:
          key: v3-plt-cache-{{ ".tool-versions" }}
          paths:
            - plts
      - run: mix dialyzer --format short --halt-exit-status

  test_docker_compose_release:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: make docker-child_chain
      - run: make docker-watcher
      - run: make docker-watcher_info
      - run:
          name: Start daemon services
          command: |
            cd priv/cabbage
            make start_daemon_services || docker-compose logs
      - run:
          name: Print docker states
          command: |
            docker image ls
            docker-compose ps
      - restore_cache:
          key: v2-asdf-install
      - run:
          name: Install Erlang and Elixir
          command: |
            [ -d ~/.asdf-vm ] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf-vm --branch v0.7.4
            echo 'source ~/.asdf-vm/asdf.sh' >> $BASH_ENV
            source $BASH_ENV
            asdf plugin-add erlang || asdf plugin-update erlang
            asdf plugin-add elixir || asdf plugin-update elixir
            asdf install erlang 22.3
            asdf install elixir 1.10.2
            asdf global elixir 1.10.2
            asdf global erlang 22.3
          no_output_timeout: 2400
      - save_cache:
          key: v2-asdf-install
          paths:
            - ~/.asdf
            - ~/.asdf-vm
      - run: make install-hex-rebar
      - run: sh .circleci/status.sh
      - restore_cache:
          key: v2-mix-specs-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run:
          name: Run specs
          command: |
            cd priv/cabbage
            make install
            make generate_api_code
            mix deps.get
            mix test
      - run:
          name: Run load test
          command: |
            cd priv/perf
            make init
            make test
      - run:
          name: (Cabbage) Format generated code and check for warnings
          command: |
            cd priv/cabbage
            # run format ONLY on formatted code so that it cleans up quoted atoms because
            # we cannot exclude folders to --warnings-as-errors
            mix format apps/child_chain_api/lib/child_chain_api/model/*.ex
            mix format apps/watcher_info_api/lib/watcher_info_api/model/*.ex
            mix format apps/watcher_security_critical_api/lib/watcher_security_critical_api/model/*.ex
            MIX_ENV=test mix do compile --warnings-as-errors --ignore-module-conflict --force, test --exclude test
      - run:
          name: (Perf) Format generated code and check for warnings
          command: |
            cd priv/perf
            # run format ONLY on formatted code so that it cleans up quoted atoms because
            # we cannot exclude folders to --warnings-as-errors
            mix format apps/*_api/lib/*_api/model/*.ex
            make format-code-check-warnings
      - save_cache:
          key: v2-mix-specs-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - "priv/cabbage/deps"
            - "priv/perf/deps"
      - run:
          name: (Cabbage) Credo and formatting
          command: |
            cd priv/cabbage
            mix do credo, format --check-formatted --dry-run
      - run:
          name: (Perf) Credo and formatting
          command: |
            cd priv/perf
            mix do credo, format --check-formatted --dry-run

  test_barebone_release:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      TERM: xterm-256color
    steps:
      - checkout
      - run: echo 'export PATH=~/.cargo/bin:$PATH' >> $BASH_ENV
      - run:
          name: Start geth, postgres and pull in blockchain snapshot
          command: make start-services
          background: true
      - run: echo 'export PATH=~/.cargo/bin:$PATH' >> $BASH_ENV
      - restore_cache:
          key: v2-asdf-install
      - run:
          name: Install Erlang and Elixir
          command: |
            [ -d ~/.asdf-vm ] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf-vm --branch v0.7.4
            echo 'source ~/.asdf-vm/asdf.sh' >> $BASH_ENV
            source $BASH_ENV
            asdf plugin-add erlang || asdf plugin-update erlang
            asdf plugin-add elixir || asdf plugin-update elixir
            asdf install erlang 22.3
            asdf install elixir 1.10.2
            asdf global elixir 1.10.2
            asdf global erlang 22.3
          no_output_timeout: 2400
      - save_cache:
          key: v2-asdf-install
          paths:
            - ~/.asdf
            - ~/.asdf-vm
      - run:
          name: Install deps
          command: |
            set -e
            sudo killall dpkg || true &&	
            sudo rm /var/lib/dpkg/lock || true &&	
            sudo rm /var/cache/apt/archives/lock || true &&	
            sudo dpkg --configure -a || true &&
            sudo apt-get update &&
            ./bin/setup
          no_output_timeout: 2400
      - run: make install-hex-rebar
      - restore_cache:
          key: v1-dev-release-cache-{{ checksum "mix.lock" }}
      - run:
          name: Compile
          command: |
            set -e
            make deps-elixir-omg
            mix compile
          no_output_timeout: 2400
      - save_cache:
          key: v1-dev-release-cache-{{ checksum "mix.lock" }}
          paths:
            - "deps_docker/"
            - "deps/"
            - "_build/dev/"
            - "_build/dev/"
      - run:
          name: Run Child Chain
          command: |
            set -e
            make start-child_chain OVERRIDING_START=start_iex OVERRIDING_VARIABLES=./bin/variables_test_barebone
          background: true
          no_output_timeout: 2400
      - run:
          name: Run Watcher
          command: |
            set -e
            make start-watcher OVERRIDING_START=start_iex OVERRIDING_VARIABLES=./bin/variables_test_barebone            
          background: true
          no_output_timeout: 2400
      - run:
          name: Run Watcher Info
          command: |
            set -e
            make start-watcher_info OVERRIDING_START=start_iex OVERRIDING_VARIABLES=./bin/variables_test_barebone
          background: true
          no_output_timeout: 2400
      - run:
          name: Install specs
          command: |
            cd priv/cabbage
            make install
            make generate_api_code
            mix deps.get
      - run:
          name: Print docker and process states
          command: |
            docker ps
            ps axww | grep watcher
            ps axww | grep watcher_info
            ps axww | grep child_chain
      - run: sh .circleci/status.sh
      - run:
          name: Run specs
          command: |
            cd priv/cabbage
            mix test
      - run:
          name: Run load test
          command: |
            cd priv/perf
            make init
            make test

  publish_child_chain:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      CHILD_CHAIN_IMAGE_NAME: "omisego/child_chain"
    steps:
      - checkout
      - run: make docker-child_chain CHILD_CHAIN_IMAGE_NAME=$CHILD_CHAIN_IMAGE_NAME
      - run: IMAGE_NAME=$CHILD_CHAIN_IMAGE_NAME sh .circleci/ci_publish.sh

  publish_watcher:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      WATCHER_IMAGE_NAME: "omisego/watcher"
    steps:
      - checkout
      - run: make docker-watcher WATCHER_IMAGE_NAME=$WATCHER_IMAGE_NAME
      - run: IMAGE_NAME=$WATCHER_IMAGE_NAME sh .circleci/ci_publish.sh

  publish_watcher_info:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      WATCHER_INFO_IMAGE_NAME: "omisego/watcher_info"
    steps:
      - checkout
      - run: make docker-watcher_info WATCHER_INFO_IMAGE_NAME=$WATCHER_INFO_IMAGE_NAME
      - run: IMAGE_NAME=$WATCHER_INFO_IMAGE_NAME sh .circleci/ci_publish.sh

  deploy_child_chain:
    executor: deployer
    steps:
      - checkout
      - run: DEPLOY=child_chain sh .circleci/ci_deploy.sh

  deploy_watcher:
    executor: deployer
    steps:
      - checkout
      - run: DEPLOY=watcher sh .circleci/ci_deploy.sh

  deploy_watcher_info:
    executor: deployer
    steps:
      - checkout
      - run: DEPLOY=watcher_info sh .circleci/ci_deploy.sh

  coveralls_report:
    docker:
      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02
        environment:
          MIX_ENV: test
    steps:
      - run:
          name: Tell coveralls.io build is done
          command: curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done"

  notify_services:
    executor: builder_pg
    steps:
      - run:
          name: Send development deployment markers
          command: |
            curl -X POST -H 'Content-type: application/json' -d '{"title": "Starting Service", "text": "Starting with git SHA '"$CIRCLE_SHA1"'", "alert_type": "info" }' 'https://app.datadoghq.com/api/v1/events?api_key='"$DD_API_KEY"''
            curl -X POST -H 'Content-type: application/json' -H 'Authorization: Bearer '"$SENTRY_TOKEN"'' -d '{"projects": ["elixir-omg"], "ref": "'"$CIRCLE_SHA1"'", "version": "Watcher-ChildChain-'"$CIRCLE_SHA1"'"}' 'https://sentry.io/api/0/organizations/omisego/releases/'
            GH_URL="https://github.com/omisego/elixir-omg/tree/${CIRCLE_BRANCH}"
            CIRCLE_URL="https://circleci.com/gh/omisego/elixir-omg/${CIRCLE_BUILD_NUM}"
            WORKFLOW_URL="https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
            MESSAGE="omisego/elixir-omg branch ${CIRCLE_BRANCH} has deployed a new version"
            RICH_MESSAGE="*omisego/elixir-omg* branch *${CIRCLE_BRANCH}* has been deployed"
            curl -X POST -H 'Content-Type: application/json' --data "{ \
              \"attachments\": [ \
                { \
                  \"fallback\": \"${MESSAGE}\", \
                  \"text\": \"Deployment: ${RICH_MESSAGE}\", \
                  \"mrkdwn\": true, \
                  \"color\": \"#2ced49\", \
                  \"fields\": [ \
                    { \
                      \"title\": \"Git SHA\", \
                      \"value\": \"<$GH_URL|$CIRCLE_SHA1>\", \
                      \"short\": true \
                    }, { \
                      \"title\": \"Branch\", \
                      \"value\": \"<$GH_URL|$CIRCLE_BRANCH>\", \
                      \"short\": true \
                    }, { \
                      \"title\": \"Build\", \
                      \"value\": \"<$CIRCLE_URL|$CIRCLE_BUILD_NUM>\", \
                      \"short\": true \
                    } \
                  ] \
                } \
              ] \
            }" ${SLACK_WEBHOOK}

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "30 8 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
      - integration_tests:
          requires: [build]
      - barebuild_macos:
          requires: [build]
      - test_barebone_release:
          requires: [build]
  build-test-deploy:
    jobs:
      - build:
          filters: &all_branches_and_tags
            branches:
              only: /.+/
            tags:
              only: /.+/
      - test_barebone_release:
          requires: [build]
          filters: *all_branches_and_tags
      - notify_services:
          requires: [deploy_watcher, deploy_watcher_info, deploy_child_chain]
          filters:
            branches:
              only:
                - master
      - coveralls_report:
          requires:
            - child_chain_coveralls_and_integration_tests
            - watcher_coveralls_and_integration_tests
            
            - common_coveralls_and_integration_tests
            - test
      - child_chain_coveralls_and_integration_tests:
          requires: [build]
          filters: *all_branches_and_tags
      - watcher_coveralls_and_integration_tests:
          requires: [build]
          filters: *all_branches_and_tags
      - common_coveralls_and_integration_tests:
          requires: [build]
          filters: *all_branches_and_tags
      - test_docker_compose_release:
          requires: [build]
          filters: *all_branches_and_tags
      - audit_deps:
          requires: [build]
          filters: *all_branches_and_tags
      - lint:
          requires: [build]
          filters: *all_branches_and_tags
      - lint_version:
          requires: [build]
          filters: *all_branches_and_tags
      - sobelow:
          requires: [build]
          filters: *all_branches_and_tags
      - dialyzer:
          requires: [build]
          filters: *all_branches_and_tags
      - test:
          requires: [build]
          filters: *all_branches_and_tags
      - property_tests:
          requires: [build]
          filters: *all_branches_and_tags
      # Publish in case of master branch, version branches and version tags.
      - publish_child_chain:
          requires:
            [
              child_chain_coveralls_and_integration_tests,
              watcher_coveralls_and_integration_tests,
              common_coveralls_and_integration_tests,
              test,
              property_tests,
              dialyzer,
              lint,
              lint_version,
              audit_deps
            ]
          filters: &master_and_version_branches_and_all_tags
            branches:
              only:
                - master
                # vMAJOR.MINOR (e.g. v0.1, v0.2, v1.0, v2.1, etc.)
                - /^v[0-9]+\.[0-9]+/
            tags:
              only:
                - /.+/
      - publish_watcher:
          requires:
            [
              child_chain_coveralls_and_integration_tests,
              watcher_coveralls_and_integration_tests,
              common_coveralls_and_integration_tests,
              test,
              property_tests,
              dialyzer,
              lint,
              lint_version,
              audit_deps
            ]
          filters: *master_and_version_branches_and_all_tags
      - publish_watcher_info:
          requires:
            [
              child_chain_coveralls_and_integration_tests,
              watcher_coveralls_and_integration_tests,
              common_coveralls_and_integration_tests,
              test,
              property_tests,
              dialyzer,
              lint,
              lint_version,
              audit_deps
            ]
          filters: *master_and_version_branches_and_all_tags
      # Release deploy to development in case of master branch.
      - deploy_child_chain:
          requires: [publish_child_chain, publish_watcher, publish_watcher_info]
          filters:
            branches:
              only:
                - master
      - deploy_watcher:
          requires: [publish_child_chain, publish_watcher, publish_watcher_info]
          filters:
            branches:
              only:
                - master
      - deploy_watcher_info:
          requires: [publish_child_chain, publish_watcher, publish_watcher_info]
          filters:
            branches:
              only:
                - master
